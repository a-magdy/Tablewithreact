function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React from "react";
import { findDOMNode } from "react-dom";
import wrapDisplayName from "recompose/wrapDisplayName";
import setDisplayName from "recompose/setDisplayName";
import pick from "lodash/pick";
import isFunction from "lodash/isFunction";

var pickedProps = ["offsetWidth", "offsetHeight", "clientWidth", "clientHeight", "scrollWidth", "scrollHeight"];

var withSize = function withSize(throttle) {
  return function (BaseComponent) {
    var WithSize = function (_React$Component) {
      _inherits(WithSize, _React$Component);

      function WithSize() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, WithSize);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = WithSize.__proto__ || Object.getPrototypeOf(WithSize)).call.apply(_ref, [this].concat(args))), _this), _this.state = {}, _this.componentDidMount = function () {
          /* eslint-disable global-require */
          _this.erd = require("element-resize-detector")();
          /* eslint-enable global-require */

          _this.erd.listenTo(findDOMNode(_this), _this.onResize);

          _this.setSizeToState();
        }, _this.componentWillUnmount = function () {
          if (isFunction(_this.onResize.cancel)) {
            _this.onResize.cancel();
          }

          _this.erd.removeListener(findDOMNode(_this), _this.onResize);
        }, _this.setSizeToState = function () {
          return _this.setState({ DOMSize: pick(findDOMNode(_this), pickedProps) });
        }, _this.onResize = throttle(_this.setSizeToState), _this.render = function () {
          return React.createElement(BaseComponent, Object.assign({}, _this.props, _this.state));
        }, _temp), _possibleConstructorReturn(_this, _ret);
      }

      /*
         * The erd will append an object element to the DOM.
         * Before react@15, if there is a string without a wrapping
         * element inside your component, ex: () => <div>foo</div>,
         * react will create a <span /> for you. This behavior will
         * cause the erd not working. Make sure to wrap your strings,
         * ex: () => <div><span>foo</span></div>.
         */

      return WithSize;
    }(React.Component);

    if (process.env.NODE_ENV !== "production") {
      return setDisplayName(wrapDisplayName(BaseComponent, "withSize"))(WithSize);
    }

    return WithSize;
  };
};

export default withSize;