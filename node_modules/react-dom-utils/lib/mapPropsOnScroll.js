function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React from "react";
import wrapDisplayName from "recompose/wrapDisplayName";
import setDisplayName from "recompose/setDisplayName";
import isFunction from "lodash/isFunction";

var getScroll = function getScroll() {
  return {
    x: window.pageXOffset,
    y: window.pageYOffset
  };
};

var mapPropsOnScroll = function mapPropsOnScroll(propsMapper, throttle) {
  return function (BaseComponent) {
    var MapPropsOnScroll = function (_React$Component) {
      _inherits(MapPropsOnScroll, _React$Component);

      function MapPropsOnScroll() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, MapPropsOnScroll);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = MapPropsOnScroll.__proto__ || Object.getPrototypeOf(MapPropsOnScroll)).call.apply(_ref, [this].concat(args))), _this), _this.scroll = {}, _this.componentDidMount = function () {
          _this.scroll = getScroll();
          window.addEventListener("scroll", _this.mapProps);
        }, _this.componentWillUnmount = function () {
          if (isFunction(_this.mapProps.cancel)) {
            _this.mapProps.cancel();
          }

          window.removeEventListener("scroll", _this.mapProps);
        }, _this.mapProps = throttle(function () {
          // Remind: fix for safari over scrolling problem
          var maxY = document.body.offsetHeight - window.innerHeight;
          if (document.body.offsetHeight !== 0 && ( // offsetHeight is always zero in jsdom
          getScroll().y < 0 || getScroll().y > maxY)) {
            return;
          }

          _this.setState(function () {
            return propsMapper(getScroll(), _this.scroll);
          });
          _this.scroll = getScroll();
        }), _this.render = function () {
          return React.createElement(BaseComponent, Object.assign({}, _this.props, _this.state));
        }, _temp), _possibleConstructorReturn(_this, _ret);
      }

      return MapPropsOnScroll;
    }(React.Component);

    if (process.env.NODE_ENV !== "production") {
      return setDisplayName(wrapDisplayName(BaseComponent, "mapPropsOnScroll"))(MapPropsOnScroll);
    }

    return MapPropsOnScroll;
  };
};

export default mapPropsOnScroll;